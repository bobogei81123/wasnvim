package nvim:api

interface nvim-types {
  /// Represents primitive types.
  ///
  /// This includes all api object types excluding array and dictionary.
  variant primitive {
    nil,
    boolean(bool),
    integer(s64),
    float(float64),
    %string(string),
    buffer(buffer),
    window(window),
    tabpage(tabpage),
    wasmref(callback),
  }

  type array = list<primitive>
  type dictionary = list<tuple<string, primitive>>
  type buffer = s64
  type window = s64
  type tabpage = s64

  /// Represents an object.
  variant object {
    nil,
    boolean(bool),
    integer(s64),
    float(float64),
    %string(string),
    array(array),
    dictionary(dictionary),
    buffer(buffer),
    window(window),
    tabpage(tabpage),
    wasmref(callback),
  }

  /// Represents callbacks that can be call from Neovim.
  ///
  /// This is a temporary workaround before we have resource types. The number
  /// is the handle referring to the callback function. If this type is used,
  /// two additional functions should be defined:
  ///
  /// /// Invokes the callback function represented by the handle `callback`.
  /// component-call-callback(handle: callback, args: list<object>)
  ///
  /// /// Frees the callback.
  /// ///
  /// /// This will be called once the callback is not needed by Neovim.
  /// component-free-callback(handle: callback, args: list<object>)
  type callback = s32
}
